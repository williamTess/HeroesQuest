{"ast":null,"code":"import { isNumeric } from \"./isNumeric\";\nconst checkLine = line => {\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3])) alert(\"error treasure number\");\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error mountain number\");\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 5) alert(\"error heroes lenght\");\n    if (!isNumeric(line[2]) || !isNumeric(line[3])) alert(\"error heroes number\");\n    console.log(line[4], line[5]);\n  }\n};\nexport const createMap = content => {\n  const mountain = [];\n  const treasure = [];\n  let map = [];\n  content.forEach(c => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n    checkLine(lineSorted);\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3]\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2]\n      });\n    }\n    mountain.forEach(pos => {\n      map[pos.y][pos.x] = \"M\";\n    });\n    treasure.forEach(pos => {\n      map[pos.y][pos.x] = `T${pos.amount}`;\n    });\n  });\n  return {\n    map: map,\n    heroes: []\n  };\n};","map":{"version":3,"names":["isNumeric","checkLine","line","localeCompare","length","alert","console","log","createMap","content","mountain","treasure","map","forEach","c","lineSorted","split","join","i","tmp","j","push","x","y","amount","pos","heroes"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/createMap.ts"],"sourcesContent":["import { Pos } from \"../type/type\";\nimport { isNumeric } from \"./isNumeric\";\n\nconst checkLine = (line: string[]) => {\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3]))\n      alert(\"error treasure number\");\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]))\n      alert(\"error mountain number\");\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 5) alert(\"error heroes lenght\");\n    if (!isNumeric(line[2]) || !isNumeric(line[3]))\n      alert(\"error heroes number\");\n    console.log(line[4], line[5]);\n  }\n};\n\nexport const createMap = (content: string[]) => {\n  const mountain: Pos[] = [];\n  const treasure: Pos[] = [];\n  let map: string[][] = [];\n\n  content.forEach((c) => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n\n    checkLine(lineSorted);\n\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp: string[] = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3],\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({ x: +lineSorted[1], y: +lineSorted[2] });\n    }\n\n    mountain.forEach((pos) => {\n      map[pos.y][pos.x] = \"M\";\n    });\n    treasure.forEach((pos) => {\n      map[pos.y][pos.x] = `T${pos.amount}`;\n    });\n  });\n\n  return { map: map, heroes: [] };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}