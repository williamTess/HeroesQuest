{"ast":null,"code":"import { MOOVE, ORIENTATION } from \"../type/enum\";\nconst changeOrientation = (move, currentOrientation) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.NORD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.SUD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\nconst moveHero = (currentPosition, currentOrientation, currentMap) => {\n  let mapTmp = [...currentMap];\n  if (currentOrientation === ORIENTATION.NORD) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x + 1][currentPosition.y] = \"A\";\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x + 1,\n        y: currentPosition.y\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x - 1][currentPosition.y] = \"A\";\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x - 1,\n        y: currentPosition.y\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y + 1] = \"A\";\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y + 1\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y - 1] = \"A\";\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y + 1\n      }\n    };\n  }\n  return {\n    map: currentMap,\n    position: currentPosition\n  };\n};\nexport const onMove = (currentMap, currentOrientation, currentPosition, move) => {\n  if (move === MOOVE.AVANCE) {\n    const {\n      map,\n      position\n    } = moveHero(currentPosition, currentOrientation, currentMap);\n    return {\n      map: map,\n      position: position,\n      orientation: currentOrientation\n    };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, currentOrientation);\n    return {\n      map: currentMap,\n      position: currentPosition,\n      orientation: orientation\n    };\n  }\n  return {\n    map: currentMap,\n    position: currentPosition,\n    orientation: currentOrientation\n  };\n};","map":{"version":3,"names":["MOOVE","ORIENTATION","changeOrientation","move","currentOrientation","orientation","GAUCHE","NORD","OUEST","SUD","EST","DROITE","moveHero","currentPosition","currentMap","mapTmp","x","y","map","position","onMove","AVANCE"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/onMove.ts"],"sourcesContent":["import React from \"react\";\nimport { MOOVE, ORIENTATION } from \"../type/enum\";\nimport { Pos } from \"../type/type\";\n\nconst changeOrientation = (move: MOOVE, currentOrientation: ORIENTATION) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.NORD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.SUD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\n\nconst moveHero = (\n  currentPosition: Pos,\n  currentOrientation: ORIENTATION,\n  currentMap: string[][]\n): { map: string[][]; position: Pos } => {\n  let mapTmp = [...currentMap];\n\n  if (currentOrientation === ORIENTATION.NORD) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x + 1][currentPosition.y] = \"A\";\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x + 1, y: currentPosition.y },\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x - 1][currentPosition.y] = \"A\";\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x - 1, y: currentPosition.y },\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y + 1] = \"A\";\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y + 1 },\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y - 1] = \"A\";\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y + 1 },\n    };\n  }\n\n  return { map: currentMap, position: currentPosition };\n};\n\nexport const onMove = (\n  currentMap: string[][],\n  currentOrientation: ORIENTATION,\n  currentPosition: Pos,\n  move: MOOVE\n): { map: string[][]; position: Pos; orientation: ORIENTATION } => {\n  if (move === MOOVE.AVANCE) {\n    const { map, position } = moveHero(\n      currentPosition,\n      currentOrientation,\n      currentMap\n    );\n    return { map: map, position: position, orientation: currentOrientation };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, currentOrientation);\n    return {\n      map: currentMap,\n      position: currentPosition,\n      orientation: orientation,\n    };\n  }\n  return {\n    map: currentMap,\n    position: currentPosition,\n    orientation: currentOrientation,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}