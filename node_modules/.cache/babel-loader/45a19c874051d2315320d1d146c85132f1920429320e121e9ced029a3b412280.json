{"ast":null,"code":"import { isNumeric } from \"./isNumeric\";\nconst checkLine = line => {\n  console.log(\"TEST222\", line[0].normalize(), \"C\", line[0].normalize() === \"C\".normalize());\n  if (line[0] === \"C\") {\n    if (line.length > 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0] === \"T\") {\n    if (line.length > 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3])) alert(\"error treasure number\");\n  } else if (line[0] === \"M\") {\n    if (line.length > 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error mountain number\");\n  }\n  console.log(\"TEST333\", line[0].normalize(), \"C\", line[0].normalize() === \"C\".normalize());\n};\nexport const createMap = content => {\n  const mountain = [];\n  const treasure = [];\n  const map = [];\n  content.map(c => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n    console.log(\"TEST111\", lineSorted[0].normalize(), \"C\", lineSorted[0].normalize() === \"C\".normalize());\n    checkLine(lineSorted);\n    console.log(\"TEST444\", lineSorted[0].normalize(), \"T\", lineSorted[0].normalize() == \"T\".normalize(), lineSorted);\n    if (lineSorted[0] === \"C\") {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"*\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0] === \"T\") {} else if (lineSorted[0] === \"M\") {}\n\n    // console.log(map);\n  });\n\n  return map;\n};","map":{"version":3,"names":["isNumeric","checkLine","line","console","log","normalize","length","alert","createMap","content","mountain","treasure","map","c","lineSorted","split","join","i","tmp","j","push"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/createMap.ts"],"sourcesContent":["import React from \"react\";\nimport { isNumeric } from \"./isNumeric\";\n\ninterface Pos {\n  x: number;\n  y: number;\n}\n\nconst checkLine = (line: string[]) => {\n  console.log(\n    \"TEST222\",\n    line[0].normalize(),\n    \"C\",\n    line[0].normalize() === \"C\".normalize()\n  );\n\n  if (line[0] === \"C\") {\n    if (line.length > 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0] === \"T\") {\n    if (line.length > 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3]))\n      alert(\"error treasure number\");\n  } else if (line[0] === \"M\") {\n    if (line.length > 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]))\n      alert(\"error mountain number\");\n  }\n  console.log(\n    \"TEST333\",\n    line[0].normalize(),\n    \"C\",\n    line[0].normalize() === \"C\".normalize()\n  );\n};\n\nexport const createMap = (content: string[]) => {\n  const mountain: Pos[] = [];\n  const treasure: Pos[] = [];\n  const map: string[][] = [];\n\n  content.map((c) => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n    console.log(\n      \"TEST111\",\n      lineSorted[0].normalize(),\n      \"C\",\n      lineSorted[0].normalize() === \"C\".normalize()\n    );\n\n    checkLine(lineSorted);\n    console.log(\n      \"TEST444\",\n      lineSorted[0].normalize(),\n      \"T\",\n      lineSorted[0].normalize() == \"T\".normalize(),\n      lineSorted\n    );\n\n    if (lineSorted[0] === \"C\") {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp: string[] = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"*\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0] === \"T\") {\n    } else if (lineSorted[0] === \"M\") {\n    }\n\n    // console.log(map);\n  });\n  return map;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}