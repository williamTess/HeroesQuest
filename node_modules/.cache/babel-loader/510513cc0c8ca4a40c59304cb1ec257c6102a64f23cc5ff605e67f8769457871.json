{"ast":null,"code":"import { MOOVE, ORIENTATION } from \"../type/enum\";\nconst changeOrientation = (move, currentOrientation) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.NORD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.SUD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\nconst moveHero = (hero, currentMap) => {\n  let mapTmp = [...currentMap];\n  const {\n    position: currentPosition,\n    orientation: currentOrientation,\n    name\n  } = hero;\n  const defaultReturn = {\n    map: currentMap,\n    position: currentPosition\n  };\n  if (currentOrientation === ORIENTATION.NORD) {\n    if (!mapTmp[currentPosition.x - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x - 1][currentPosition.y])) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x - 1][currentPosition.y] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x - 1,\n        y: currentPosition.y\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    if (!mapTmp[currentPosition.x + 1]) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x + 1][currentPosition.y] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x + 1,\n        y: currentPosition.y\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y + 1]) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y + 1] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y + 1\n      }\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y - 1]) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y - 1] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y - 1\n      }\n    };\n  }\n  return defaultReturn;\n};\nexport const onMove = (currentMap, hero, move) => {\n  if (move === MOOVE.AVANCE) {\n    const {\n      map,\n      position\n    } = moveHero(hero, currentMap);\n    return {\n      map: map,\n      position: position,\n      orientation: hero.orientation\n    };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, hero.orientation);\n    return {\n      map: currentMap,\n      position: hero.position,\n      orientation: orientation\n    };\n  }\n  return {\n    map: currentMap,\n    position: hero.position,\n    orientation: hero.orientation\n  };\n};","map":{"version":3,"names":["MOOVE","ORIENTATION","changeOrientation","move","currentOrientation","orientation","GAUCHE","NORD","OUEST","SUD","EST","DROITE","moveHero","hero","currentMap","mapTmp","position","currentPosition","name","defaultReturn","map","x","includes","y","onMove","AVANCE"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/onMove.ts"],"sourcesContent":["import { MOOVE, ORIENTATION } from \"../type/enum\";\nimport { Hero, Pos } from \"../type/type\";\n\nconst changeOrientation = (move: MOOVE, currentOrientation: ORIENTATION) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.NORD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.SUD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\n\nconst moveHero = (\n  hero: Hero,\n  currentMap: string[][]\n): { map: string[][]; position: Pos } => {\n  let mapTmp = [...currentMap];\n  const {\n    position: currentPosition,\n    orientation: currentOrientation,\n    name,\n  } = hero;\n  const defaultReturn = { map: currentMap, position: currentPosition };\n\n  if (currentOrientation === ORIENTATION.NORD) {\n    if (!mapTmp[currentPosition.x - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x - 1][currentPosition.y]))\n      return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x - 1][currentPosition.y] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x - 1, y: currentPosition.y },\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    if (!mapTmp[currentPosition.x + 1]) return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x + 1][currentPosition.y] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x + 1, y: currentPosition.y },\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y + 1]) return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y + 1] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y + 1 },\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y - 1]) return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = \"0\";\n    mapTmp[currentPosition.x][currentPosition.y - 1] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y - 1 },\n    };\n  }\n\n  return defaultReturn;\n};\n\nexport const onMove = (\n  currentMap: string[][],\n  hero: Hero,\n  move: MOOVE\n): { map: string[][]; position: Pos; orientation: ORIENTATION } => {\n  if (move === MOOVE.AVANCE) {\n    const { map, position } = moveHero(hero, currentMap);\n    return { map: map, position: position, orientation: hero.orientation };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, hero.orientation);\n    return {\n      map: currentMap,\n      position: hero.position,\n      orientation: orientation,\n    };\n  }\n  return {\n    map: currentMap,\n    position: hero.position,\n    orientation: hero.orientation,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}