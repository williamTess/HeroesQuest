{"ast":null,"code":"import { ORIENTATION } from \"../type/enum\";\nimport { regex } from \"../type/regex\";\nimport { isEnum } from \"./isEnum\";\nimport { isNumeric } from \"./isNumeric\";\nconst checkLine = line => {\n  console.log(line);\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) return \"error map lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) return \"error map number\";\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) return \"error treasure lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3])) return \"error treasure number\";\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) return \"error mountain lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) return \"error mountain number\";\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 6) return \"error heroes lenght\";\n    if (!isNumeric(line[2]) || !isNumeric(line[3])) return \"error heroes number\";\n    if (!isEnum(ORIENTATION, line[4])) return \"error heroes orientation\";\n    if (!regex.isMove.test(line[5])) return \"error hero move\";\n  }\n  return \"\";\n};\nexport const createMap = content => {\n  const mountain = [];\n  const treasure = [];\n  const heroes = [];\n  let map = [];\n  let error = \"\";\n  content.some(c => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n    error = checkLine(lineSorted);\n    if (error) return true;\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3]\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2]\n      });\n    } else if (lineSorted[0].localeCompare(\"A\") === 0) {\n      heroes.push({\n        name: lineSorted[1],\n        moves: lineSorted[5].split(\"\"),\n        orientation: lineSorted[4],\n        position: {\n          x: +lineSorted[2],\n          y: +lineSorted[3]\n        },\n        prevCase: \"0\",\n        treasure: 0\n      });\n    }\n    return false;\n  });\n  if (!error) {\n    mountain.forEach(pos => {\n      if (map[pos.y][pos.x] != \"0\") return {\n        map: map,\n        heroes: heroes,\n        error: \"overlap mountain\"\n      };\n      map[pos.y][pos.x] = \"M\";\n    });\n    treasure.forEach(pos => {\n      if (map[pos.y][pos.x] != \"0\") return {\n        map: map,\n        heroes: heroes,\n        error: \"overlap treasure\"\n      };\n      map[pos.y][pos.x] = `T${pos.amount}`;\n    });\n    heroes.forEach(hero => {\n      if (map[hero.position.y][hero.position.x] != \"0\") return {\n        map: map,\n        heroes: heroes,\n        error: \"overlap hero\"\n      };\n      map[hero.position.y][hero.position.x] = `${hero.name}`;\n    });\n  }\n  return {\n    map: map,\n    heroes: heroes,\n    error: error\n  };\n};","map":{"version":3,"names":["ORIENTATION","regex","isEnum","isNumeric","checkLine","line","console","log","localeCompare","length","isMove","test","createMap","content","mountain","treasure","heroes","map","error","some","c","lineSorted","split","join","i","tmp","j","push","x","y","amount","name","moves","orientation","position","prevCase","forEach","pos","hero"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/createMap.ts"],"sourcesContent":["import { MOOVE, ORIENTATION } from \"../type/enum\";\nimport { regex } from \"../type/regex\";\nimport { Hero, Pos } from \"../type/type\";\nimport { isEnum } from \"./isEnum\";\nimport { isNumeric } from \"./isNumeric\";\n\nconst checkLine = (line: string[]) => {\n  console.log(line);\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) return \"error map lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) return \"error map number\";\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) return \"error treasure lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3]))\n      return \"error treasure number\";\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) return \"error mountain lenght\";\n    if (!isNumeric(line[1]) || !isNumeric(line[2]))\n      return \"error mountain number\";\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 6) return \"error heroes lenght\";\n    if (!isNumeric(line[2]) || !isNumeric(line[3]))\n      return \"error heroes number\";\n    if (!isEnum(ORIENTATION, line[4])) return \"error heroes orientation\";\n    if (!regex.isMove.test(line[5])) return \"error hero move\";\n  }\n  return \"\";\n};\n\nexport const createMap = (content: string[]) => {\n  const mountain: Pos[] = [];\n  const treasure: Pos[] = [];\n  const heroes: Hero[] = [];\n  let map: string[][] = [];\n  let error: string = \"\";\n\n  content.some((c) => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n\n    error = checkLine(lineSorted);\n    if (error) return true;\n\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp: string[] = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3],\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({ x: +lineSorted[1], y: +lineSorted[2] });\n    } else if (lineSorted[0].localeCompare(\"A\") === 0) {\n      heroes.push({\n        name: lineSorted[1],\n        moves: lineSorted[5].split(\"\") as MOOVE[],\n        orientation: lineSorted[4] as ORIENTATION,\n        position: { x: +lineSorted[2], y: +lineSorted[3] },\n        prevCase: \"0\",\n        treasure: 0,\n      });\n    }\n    return false;\n  });\n\n  if (!error) {\n    mountain.forEach((pos) => {\n      if (map[pos.y][pos.x] != \"0\")\n        return { map: map, heroes: heroes, error: \"overlap mountain\" };\n      map[pos.y][pos.x] = \"M\";\n    });\n    treasure.forEach((pos) => {\n      if (map[pos.y][pos.x] != \"0\")\n        return { map: map, heroes: heroes, error: \"overlap treasure\" };\n      map[pos.y][pos.x] = `T${pos.amount}`;\n    });\n    heroes.forEach((hero) => {\n      if (map[hero.position.y][hero.position.x] != \"0\")\n        return { map: map, heroes: heroes, error: \"overlap hero\" };\n      map[hero.position.y][hero.position.x] = `${hero.name}`;\n    });\n  }\n\n  return { map: map, heroes: heroes, error: error };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}