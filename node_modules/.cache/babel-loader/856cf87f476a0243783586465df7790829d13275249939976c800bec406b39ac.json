{"ast":null,"code":"import { ORIENTATION } from \"../type/enum\";\nimport { regex } from \"../type/regex\";\nimport { isEnum } from \"./isEnum\";\nimport { isNumeric } from \"./isNumeric\";\nconst checkLine = line => {\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3])) alert(\"error treasure number\");\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error mountain number\");\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 6) alert(\"error heroes lenght\");\n    if (!isNumeric(line[2]) || !isNumeric(line[3])) alert(\"error heroes number\");\n    if (!isEnum(ORIENTATION, line[4])) alert(\"error heroes orientation\");\n    if (!regex.isMove.test(line[5])) alert(\"error hero move\");\n  }\n};\nexport const createMap = content => {\n  const mountain = [];\n  const treasure = [];\n  const heroes = [];\n  let map = [];\n  content.forEach(c => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n    checkLine(lineSorted);\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3]\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2]\n      });\n    } else if (lineSorted[0].localeCompare(\"A\") === 0) {\n      heroes.push({\n        name: lineSorted[1],\n        moves: lineSorted[5],\n        orientation: lineSorted[4],\n        position: {\n          x: +lineSorted[2],\n          y: +lineSorted[3]\n        }\n      });\n    }\n  });\n  mountain.forEach(pos => {\n    map[pos.y][pos.x] = \"M\";\n  });\n  treasure.forEach(pos => {\n    map[pos.y][pos.x] = `T${pos.amount}`;\n  });\n  heroes.forEach(hero => {\n    map[hero.position.y][hero.position.x] = `${hero.name}`;\n  });\n  return {\n    map: map,\n    heroes: heroes\n  };\n};","map":{"version":3,"names":["ORIENTATION","regex","isEnum","isNumeric","checkLine","line","localeCompare","length","alert","isMove","test","createMap","content","mountain","treasure","heroes","map","forEach","c","lineSorted","split","join","i","tmp","j","push","x","y","amount","name","moves","orientation","position","pos","hero"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/createMap.ts"],"sourcesContent":["import { ORIENTATION } from \"../type/enum\";\nimport { regex } from \"../type/regex\";\nimport { Hero, Pos } from \"../type/type\";\nimport { isEnum } from \"./isEnum\";\nimport { isNumeric } from \"./isNumeric\";\n\nconst checkLine = (line: string[]) => {\n  if (line[0].localeCompare(\"C\") === 0) {\n    if (line.length !== 3) alert(\"error map lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2])) alert(\"error map number\");\n  } else if (line[0].localeCompare(\"T\") === 0) {\n    if (line.length !== 4) alert(\"error treasure lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]) || !isNumeric(line[3]))\n      alert(\"error treasure number\");\n  } else if (line[0].localeCompare(\"M\") === 0) {\n    if (line.length !== 3) alert(\"error mountain lenght\");\n    if (!isNumeric(line[1]) || !isNumeric(line[2]))\n      alert(\"error mountain number\");\n  } else if (line[0].localeCompare(\"A\") === 0) {\n    if (line.length !== 6) alert(\"error heroes lenght\");\n    if (!isNumeric(line[2]) || !isNumeric(line[3]))\n      alert(\"error heroes number\");\n    if (!isEnum(ORIENTATION, line[4])) alert(\"error heroes orientation\");\n    if (!regex.isMove.test(line[5])) alert(\"error hero move\");\n  }\n};\n\nexport const createMap = (content: string[]) => {\n  const mountain: Pos[] = [];\n  const treasure: Pos[] = [];\n  const heroes: Hero[] = [];\n  let map: string[][] = [];\n\n  content.forEach((c) => {\n    const lineSorted = c.split(\" \").join(\"\").split(\"-\");\n\n    checkLine(lineSorted);\n\n    if (lineSorted[0].localeCompare(\"C\") === 0) {\n      for (let i = 0; i < +lineSorted[2]; i++) {\n        const tmp: string[] = [];\n        for (let j = 0; j < +lineSorted[1]; j++) {\n          tmp.push(\"0\");\n        }\n        map.push(tmp);\n      }\n    } else if (lineSorted[0].localeCompare(\"T\") === 0) {\n      treasure.push({\n        x: +lineSorted[1],\n        y: +lineSorted[2],\n        amount: +lineSorted[3],\n      });\n    } else if (lineSorted[0].localeCompare(\"M\") === 0) {\n      mountain.push({ x: +lineSorted[1], y: +lineSorted[2] });\n    } else if (lineSorted[0].localeCompare(\"A\") === 0) {\n      heroes.push({\n        name: lineSorted[1],\n        moves: lineSorted[5],\n        orientation: lineSorted[4],\n        position: { x: +lineSorted[2], y: +lineSorted[3] },\n      });\n    }\n  });\n\n  mountain.forEach((pos) => {\n    map[pos.y][pos.x] = \"M\";\n  });\n  treasure.forEach((pos) => {\n    map[pos.y][pos.x] = `T${pos.amount}`;\n  });\n  heroes.forEach((hero) => {\n    map[hero.position.y][hero.position.x] = `${hero.name}`;\n  });\n\n  return { map: map, heroes: heroes };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,KAAK,QAAQ,eAAe;AAErC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,SAAS,QAAQ,aAAa;AAEvC,MAAMC,SAAS,GAAIC,IAAc,IAAK;EACpC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IACpC,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,kBAAkB,CAAC;IAChD,IAAI,CAACL,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEG,KAAK,CAAC,kBAAkB,CAAC;EAC3E,CAAC,MAAM,IAAIH,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3C,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,uBAAuB,CAAC;IACrD,IAAI,CAACL,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,EACnEG,KAAK,CAAC,uBAAuB,CAAC;EAClC,CAAC,MAAM,IAAIH,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3C,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,uBAAuB,CAAC;IACrD,IAAI,CAACL,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,EAC5CG,KAAK,CAAC,uBAAuB,CAAC;EAClC,CAAC,MAAM,IAAIH,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3C,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,qBAAqB,CAAC;IACnD,IAAI,CAACL,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,EAC5CG,KAAK,CAAC,qBAAqB,CAAC;IAC9B,IAAI,CAACN,MAAM,CAACF,WAAW,EAAEK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEG,KAAK,CAAC,0BAA0B,CAAC;IACpE,IAAI,CAACP,KAAK,CAACQ,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEG,KAAK,CAAC,iBAAiB,CAAC;EAC3D;AACF,CAAC;AAED,OAAO,MAAMG,SAAS,GAAIC,OAAiB,IAAK;EAC9C,MAAMC,QAAe,GAAG,EAAE;EAC1B,MAAMC,QAAe,GAAG,EAAE;EAC1B,MAAMC,MAAc,GAAG,EAAE;EACzB,IAAIC,GAAe,GAAG,EAAE;EAExBJ,OAAO,CAACK,OAAO,CAAEC,CAAC,IAAK;IACrB,MAAMC,UAAU,GAAGD,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;IAEnDhB,SAAS,CAACe,UAAU,CAAC;IAErB,IAAIA,UAAU,CAAC,CAAC,CAAC,CAACb,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MAC1C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAACH,UAAU,CAAC,CAAC,CAAC,EAAEG,CAAC,EAAE,EAAE;QACvC,MAAMC,GAAa,GAAG,EAAE;QACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAACL,UAAU,CAAC,CAAC,CAAC,EAAEK,CAAC,EAAE,EAAE;UACvCD,GAAG,CAACE,IAAI,CAAC,GAAG,CAAC;QACf;QACAT,GAAG,CAACS,IAAI,CAACF,GAAG,CAAC;MACf;IACF,CAAC,MAAM,IAAIJ,UAAU,CAAC,CAAC,CAAC,CAACb,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MACjDQ,QAAQ,CAACW,IAAI,CAAC;QACZC,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC,CAAC;QACjBQ,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC,CAAC;QACjBS,MAAM,EAAE,CAACT,UAAU,CAAC,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIA,UAAU,CAAC,CAAC,CAAC,CAACb,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MACjDO,QAAQ,CAACY,IAAI,CAAC;QAAEC,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC,CAAC;QAAEQ,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;MAAE,CAAC,CAAC;IACzD,CAAC,MAAM,IAAIA,UAAU,CAAC,CAAC,CAAC,CAACb,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MACjDS,MAAM,CAACU,IAAI,CAAC;QACVI,IAAI,EAAEV,UAAU,CAAC,CAAC,CAAC;QACnBW,KAAK,EAAEX,UAAU,CAAC,CAAC,CAAC;QACpBY,WAAW,EAAEZ,UAAU,CAAC,CAAC,CAAC;QAC1Ba,QAAQ,EAAE;UAAEN,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC,CAAC;UAAEQ,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;QAAE;MACnD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEFN,QAAQ,CAACI,OAAO,CAAEgB,GAAG,IAAK;IACxBjB,GAAG,CAACiB,GAAG,CAACN,CAAC,CAAC,CAACM,GAAG,CAACP,CAAC,CAAC,GAAG,GAAG;EACzB,CAAC,CAAC;EACFZ,QAAQ,CAACG,OAAO,CAAEgB,GAAG,IAAK;IACxBjB,GAAG,CAACiB,GAAG,CAACN,CAAC,CAAC,CAACM,GAAG,CAACP,CAAC,CAAC,GAAI,IAAGO,GAAG,CAACL,MAAO,EAAC;EACtC,CAAC,CAAC;EACFb,MAAM,CAACE,OAAO,CAAEiB,IAAI,IAAK;IACvBlB,GAAG,CAACkB,IAAI,CAACF,QAAQ,CAACL,CAAC,CAAC,CAACO,IAAI,CAACF,QAAQ,CAACN,CAAC,CAAC,GAAI,GAAEQ,IAAI,CAACL,IAAK,EAAC;EACxD,CAAC,CAAC;EAEF,OAAO;IAAEb,GAAG,EAAEA,GAAG;IAAED,MAAM,EAAEA;EAAO,CAAC;AACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}