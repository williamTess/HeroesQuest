{"ast":null,"code":"import { MOOVE, ORIENTATION } from \"../type/enum\";\nconst getPrevCase = current => {\n  let newPrevCase = current;\n  console.log(\"current\", current);\n  if (current.includes(\"T\")) {\n    if (current === \"T\") newPrevCase = \"0\";else {\n      const strNumber = current.slice(1);\n      const rest = +strNumber - 1;\n      newPrevCase = `T${rest}`;\n      console.log(`T${rest}`);\n    }\n  }\n  return newPrevCase;\n};\nconst changeOrientation = (move, currentOrientation) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.NORD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;else if (currentOrientation === ORIENTATION.SUD) orientation = ORIENTATION.OUEST;else if (currentOrientation === ORIENTATION.EST) orientation = ORIENTATION.SUD;else if (currentOrientation === ORIENTATION.OUEST) orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\nconst moveHero = (hero, currentMap) => {\n  let mapTmp = [...currentMap];\n  const {\n    position: currentPosition,\n    orientation: currentOrientation,\n    prevCase: currentPrevCase,\n    name\n  } = hero;\n  const defaultReturn = {\n    map: currentMap,\n    position: currentPosition,\n    prevCase: currentPrevCase\n  };\n  let newPrevCase;\n  if (currentOrientation === ORIENTATION.NORD) {\n    if (!mapTmp[currentPosition.x - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x - 1][currentPosition.y])) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x - 1][currentPosition.y]);\n    mapTmp[currentPosition.x - 1][currentPosition.y] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x - 1,\n        y: currentPosition.y\n      },\n      prevCase: newPrevCase\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    if (!mapTmp[currentPosition.x + 1]) return defaultReturn;\n    console.log(mapTmp[currentPosition.x + 1][currentPosition.y], \"0 ou T..\", [\"0\", \"T\"].includes(mapTmp[currentPosition.x + 1][currentPosition.y]));\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x + 1][currentPosition.y])) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x + 1][currentPosition.y]);\n    mapTmp[currentPosition.x + 1][currentPosition.y] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x + 1,\n        y: currentPosition.y\n      },\n      prevCase: newPrevCase\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y + 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x][currentPosition.y + 1])) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x][currentPosition.y + 1]);\n    mapTmp[currentPosition.x][currentPosition.y + 1] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y + 1\n      },\n      prevCase: newPrevCase\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x][currentPosition.y - 1])) return defaultReturn;\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x][currentPosition.y - 1]);\n    mapTmp[currentPosition.x][currentPosition.y - 1] = name;\n    return {\n      map: mapTmp,\n      position: {\n        x: currentPosition.x,\n        y: currentPosition.y - 1\n      },\n      prevCase: newPrevCase\n    };\n  }\n  return defaultReturn;\n};\nexport const onMove = (currentMap, hero, move) => {\n  if (move === MOOVE.AVANCE) {\n    const {\n      map,\n      position,\n      prevCase\n    } = moveHero(hero, currentMap);\n    return {\n      map: map,\n      newHeroStat: {\n        ...hero,\n        position,\n        prevCase\n      }\n    };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, hero.orientation);\n    return {\n      map: currentMap,\n      newHeroStat: {\n        ...hero,\n        orientation\n      }\n    };\n  }\n  return {\n    map: currentMap,\n    newHeroStat: {\n      ...hero\n    }\n  };\n};","map":{"version":3,"names":["MOOVE","ORIENTATION","getPrevCase","current","newPrevCase","console","log","includes","strNumber","slice","rest","changeOrientation","move","currentOrientation","orientation","GAUCHE","NORD","OUEST","SUD","EST","DROITE","moveHero","hero","currentMap","mapTmp","position","currentPosition","prevCase","currentPrevCase","name","defaultReturn","map","x","y","onMove","AVANCE","newHeroStat"],"sources":["/Users/william/Desktop/Projets Code/entretient/map-resolver/src/utils/onMove.ts"],"sourcesContent":["import { MOOVE, ORIENTATION } from \"../type/enum\";\nimport { Hero, Pos } from \"../type/type\";\n\nconst getPrevCase = (current: string) => {\n  let newPrevCase: string = current;\n  console.log(\"current\", current);\n  if (current.includes(\"T\")) {\n    if (current === \"T\") newPrevCase = \"0\";\n    else {\n      const strNumber = current.slice(1);\n      const rest = +strNumber - 1;\n\n      newPrevCase = `T${rest}`;\n      console.log(`T${rest}`);\n    }\n  }\n\n  return newPrevCase;\n};\n\nconst changeOrientation = (move: MOOVE, currentOrientation: ORIENTATION) => {\n  let orientation = currentOrientation;\n  if (move === MOOVE.GAUCHE) {\n    if (currentOrientation === ORIENTATION.NORD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.NORD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.SUD;\n  } else if (move === MOOVE.DROITE) {\n    if (currentOrientation === ORIENTATION.NORD) orientation = ORIENTATION.EST;\n    else if (currentOrientation === ORIENTATION.SUD)\n      orientation = ORIENTATION.OUEST;\n    else if (currentOrientation === ORIENTATION.EST)\n      orientation = ORIENTATION.SUD;\n    else if (currentOrientation === ORIENTATION.OUEST)\n      orientation = ORIENTATION.NORD;\n  }\n  return orientation;\n};\n\nconst moveHero = (\n  hero: Hero,\n  currentMap: string[][]\n): { map: string[][]; position: Pos; prevCase: string } => {\n  let mapTmp = [...currentMap];\n  const {\n    position: currentPosition,\n    orientation: currentOrientation,\n    prevCase: currentPrevCase,\n    name,\n  } = hero;\n  const defaultReturn = {\n    map: currentMap,\n    position: currentPosition,\n    prevCase: currentPrevCase,\n  };\n  let newPrevCase: string;\n\n  if (currentOrientation === ORIENTATION.NORD) {\n    if (!mapTmp[currentPosition.x - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x - 1][currentPosition.y]))\n      return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x - 1][currentPosition.y]);\n    mapTmp[currentPosition.x - 1][currentPosition.y] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x - 1, y: currentPosition.y },\n      prevCase: newPrevCase,\n    };\n  } else if (currentOrientation === ORIENTATION.SUD) {\n    if (!mapTmp[currentPosition.x + 1]) return defaultReturn;\n    console.log(\n      mapTmp[currentPosition.x + 1][currentPosition.y],\n      \"0 ou T..\",\n      [\"0\", \"T\"].includes(mapTmp[currentPosition.x + 1][currentPosition.y])\n    );\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x + 1][currentPosition.y]))\n      return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x + 1][currentPosition.y]);\n    mapTmp[currentPosition.x + 1][currentPosition.y] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x + 1, y: currentPosition.y },\n      prevCase: newPrevCase,\n    };\n  } else if (currentOrientation === ORIENTATION.EST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y + 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x][currentPosition.y + 1]))\n      return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x][currentPosition.y + 1]);\n    mapTmp[currentPosition.x][currentPosition.y + 1] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y + 1 },\n      prevCase: newPrevCase,\n    };\n  } else if (currentOrientation === ORIENTATION.OUEST) {\n    if (!mapTmp[currentPosition.x][currentPosition.y - 1]) return defaultReturn;\n    if (![\"0\", \"T\"].includes(mapTmp[currentPosition.x][currentPosition.y - 1]))\n      return defaultReturn;\n\n    mapTmp[currentPosition.x][currentPosition.y] = currentPrevCase;\n    newPrevCase = getPrevCase(mapTmp[currentPosition.x][currentPosition.y - 1]);\n    mapTmp[currentPosition.x][currentPosition.y - 1] = name;\n\n    return {\n      map: mapTmp,\n      position: { x: currentPosition.x, y: currentPosition.y - 1 },\n      prevCase: newPrevCase,\n    };\n  }\n\n  return defaultReturn;\n};\n\nexport const onMove = (\n  currentMap: string[][],\n  hero: Hero,\n  move: MOOVE\n): {\n  map: string[][];\n  newHeroStat: Hero;\n} => {\n  if (move === MOOVE.AVANCE) {\n    const { map, position, prevCase } = moveHero(hero, currentMap);\n    return {\n      map: map,\n      newHeroStat: { ...hero, position, prevCase },\n    };\n  } else if (move === MOOVE.DROITE || move === MOOVE.GAUCHE) {\n    const orientation = changeOrientation(move, hero.orientation);\n    return {\n      map: currentMap,\n      newHeroStat: { ...hero, orientation },\n    };\n  }\n  return {\n    map: currentMap,\n    newHeroStat: { ...hero },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}